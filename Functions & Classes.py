# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R_GaNzfrNunOMKL2kpf9OvSUiRdIAy6i
"""

import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader, random_split


class MyData(Dataset):
    def __init__(self, csv_file):
        self.data = pd.read_csv(csv_file)
        self.data['University_Year'] = self.data['University_Year'].str[0].astype(int)
        self.features = self.data.drop(columns=['Student_ID', 'Gender', 'Sleep_Duration', 'Sleep_Quality',
                                                'Weekday_Sleep_Start', 'Weekday_Sleep_End', 'Weekend_Sleep_Start',
                                                'Weekend_Sleep_End'])
        self.labels = self.data['Sleep_Duration']

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        # Get the sample and corresponding label
        sample = torch.tensor(self.features.iloc[idx].values, dtype=torch.float32)
        label = torch.tensor(self.labels.iloc[idx], dtype=torch.float32)
        return sample, label


class MyNN(nn.Module):
    def __init__(self):
        super(MyNN, self).__init__()
        self.fc1 = nn.Linear(6, 80)          # Input layer (6 features per sample)
        self.fc2 = nn.Linear(80, 50)         # Hidden layer 1 (80 neurons)
        self.fc3 = nn.Linear(50, 1)          # Hidden layer 2 (50 neurons) - Outputs a scalar

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x


def evaluation(loader):
    model.eval()                   # Sets model to evaluation mode

    with torch.no_grad():          # Disables gradient calculations
        for features, labels in loader:
          output = model(features)
          batch_percentage_diff = ((labels - output).abs() / labels) * 100
          avg_batch_percentage_diff = batch_percentage_diff.mean().item()
    return avg_batch_percentage_diff